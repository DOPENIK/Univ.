파일에서 동공 영역을 검출한 후,

1) 동공 영역에 외접하는 직사각형을 그리고(라인 두께 1픽셀, 라인 밝기값 255)

2) 동공 영역의 무게중심을 통과하는 수평선/수직선을 그리는(라인 두께 1픽셀, 라인 밝기값 255)

프로그램을 구현하시오.

- 함수형태로 구현, main함수에서 해당함수 호출하여 실행되도록 함

- 함수원형 예시:

void DrawRectOutline(BYTE * Img, int W, int H, int LU_X, int LU_Y, int RD_X, int RD_Y);

// Img: 사각형을 그릴 이미지배열, W: 영상 가로사이즈, H: 영상 세로사이즈,

// LU_X: 사각형의 좌측상단 X좌표, LU_Y: 사각형의 좌측상단 Y좌표,

// RD_X: 사각형의 우측하단 X좌표, LU_Y: 사각형의 우측하단 Y좌표.



void DrawCrossLine(BYTE * Img, int W, int H, int Cx, int Cy);


// Img: 가로/세로 라인을 그릴 이미지배열, W: 영상 가로사이즈, H: 영상 세로사이즈,

// Cx: 가로/세로 라인이 교차되는 지점의 X좌표

// Cy: 가로/세로 라인이 교차되는 지점의 Y좌표

ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
1) 해당 영역의 X좌표 위치 모두 더해서 한 변수에 저장 (sumx)

2) 해당 영역의 Y좌표 위치 모두 더해서 한 변수에 저장 (sumy)

3) 해당 영역의 픽셀 갯수(cnt)로 저장된 변수(sumx 및 sumy)를 나눈 결과(cenx, ceny)가 무게중심임
ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
동공 이진화 및 라벨링까지 된 상태에서,

1) 좌측상단부터 우방향 가로우선으로 탐색하다가, 0인화소를 처음 만났을 때의 Y좌표를 저장: y1
2) 우측하단부터 좌방향 가로우선으로 탐색하다가, 0인화소를 처음 만났을 때의 Y좌표를 저장: y2
3) 좌측상단부터 하방향 세로우선으로  탐색하다가, 0인화소를 처음 만났을 때의 X좌표를 저장: x1
4) 우측하단부터 상방향 세로우선으로  탐색하다가, 0인화소를 처음 만났을 때의 X좌표를 저장: x2  

- 그러면 두 개의 점이 결정됨: (x1, y1), (x2, y2)
- 외접사각형의 4개 꼭지점 좌표: 좌상(x1, y1), 우상(x2, y1), 좌하(x1, y2), 우하(x2, y2)

5) line 4개 그리면 외접사각형 완성: 좌상 ~ 우상, 우상~ 우하, 좌하 ~ 우하, 좌상 ~ 좌하
단일 for문 4개로 그리면 되겠습니다. 